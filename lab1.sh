#!/bin/bash

# Разработать скрипт работы с архивами, который: 
# - запрашивает тип действия: разархивировать или заархивировать
# - для архивации: запрашивает каталог для архивации и имя архива, создаёт архив с этим именем
# - для распаковки: спрашивает имя файла с архивом и распаковывает его
# Для выполнения задания используйте утилиту ."

echo "

Автор программы:

Название программы: \"Архиватор3000\".

Описание:
Данная программа помогает заархировать папку или распаковать архив. Для архивации от пользователя потребуется лишь ввести путь папки и название будущего архива, а для обратного процесса достаточно будет единственного пути к архиву, который будет распакован в том же каталоге, где он находится.
"

while [ 1 -eq 1 ]; do # Бесконечный цикл

	echo "В текущем каталоге находятся следующие каталоги и файлы:"
	ls # Вывод содержимого текущего каталога

	while [ 1 -eq 1 ]; do # Бесконечный цикл с выбором действия
		echo -e "\n\nВыберите действие:\n 1) заархивировать;\n 2) разархивировать.\n\nВыведите номер действия: "
		read INPUT # Считывание ввода
		if [ "$INPUT" = "1" ] || [ "$INPUT" = "2" ]; then # Проверка, введено было 1 или 2
			break # Если да, выходим из цикла
		fi
		echo "Простите, ответ не был распознан. Повторите попытку." # Если нет, просим пользователя заново ввести
	done
	
	
	if [ "$INPUT" = "1" ]; then # Архивирование
		
		echo -e "\n\nВведите путь к папке, которая будет заархивирована:"
		read MYPATH # Считывание ввода
		if ! [ -d $MYPATH ]; then # Если файл не существует, то идём в конец программы
			echo "Данный пункт не указывает на директорию."
		else
			echo -e "\nВведите название будущего архива:"
			read NAME # Считывание ввода
			tar -cf $NAME.tar $MYPATH # Создание архива NAME с папкой MYPATH, где -c - архивирование, -f - создание нового файла
			echo -e "\nАрхив создан в текущей папке с именем \"$NAME.tar\"."
			
			# Удаление файла
			while [ 1 -eq 1 ]; do  # Бесконечный цикл с вопросом по удалению
				echo -e "\n\nУдалить выбранный каталог, чтобы он остался только в архиве? (y/n)"
				read INPUT # Считывание ввода
				if [ "$INPUT" = "y" ] || [ "$INPUT" = "n" ]; then # Проверка правильности ввода y или n
					break # Если ввод правильный, то выходим из цикла
				fi
				echo "Простите, ответ не был распознан. Повторите попытку." # Если нет, то повторяем цикл
			done
			if [ "$INPUT" = "y" ]; then # Если ответ "y", 
				rmdir $MYPATH # то удаляем заархивированную папку
			fi
			
		fi
		
	else # Разархивирование
	
		echo -e "\n\nВведите путь к архиву:"
		read MYPATH # Считывание ввода
		if [ -f $MYPATH ] && [ "${MYPATH: -3}" = "tar" ]; then # Проверка, существует ли файл по такому пути и является ли он tar-архивом
			tar -xf $MYPATH # Разархивирование архива по пути MYPATH, где -x - разархивирование, -f - создание нового файла
			echo -e "\nФайл был разархивирован в текущую папку."
		else
			echo -e "\nДанный путь не указывает на tar-архив." # Если указанный файл не подходит, то оповещаем об этом
		fi
	fi
	
	# Вопрос о выходе
	while [ 1 -eq 1 ]; do # Бесконечный цикл
		echo -e "\n\nХотите запустить программу снова? (y/n)"
		read INPUT # Считывание ввода
		if [ "$INPUT" = "y" ] || [ "$INPUT" = "n" ]; then # Проверка верного ввода
			break # Если ввод правильный, то выходим из цикла
		fi
		echo "Простите, ответ не был распознан. Повторите попытку." # Если нет, то повторяем цикл
	done
	
	if [ "$INPUT" = "n" ]; then # Если пользователь решил завершить программу,
		break # то она завершается
	fi # Иначе бесконечный цикл программы запускается на следующую итерацию
	
done

# Оповещение о выключении
echo -e "\nСпасибо за использование. Программа завершается.\n"